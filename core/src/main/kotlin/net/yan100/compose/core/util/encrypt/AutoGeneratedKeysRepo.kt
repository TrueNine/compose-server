/*
 *  Copyright (c) 2020-2024 TrueNine. All rights reserved.
 *
 * The following source code is owned, developed and copyrighted by TrueNine
 * (truenine304520@gmail.com) and represents a substantial investment of time, effort,
 * and resources. This software and its components are not to be used, reproduced,
 * distributed, or sublicensed in any form without the express written consent of
 * the copyright owner, except as permitted by law.
 * Any unauthorized use, distribution, or modification of this source code,
 * or any portion thereof, may result in severe civil and criminal penalties,
 * and will be prosecuted to the maximum extent possible under the law.
 * For inquiries regarding usage or redistribution, please contact:
 *     TrueNine
 *     email: <truenine304520@gmail.com>
 *     website: <github.com/TrueNine>
 */
package net.yan100.compose.core.util.encrypt

import javax.crypto.spec.SecretKeySpec
import net.yan100.compose.core.log.slf4j
import net.yan100.compose.core.models.EccKeyPair
import net.yan100.compose.core.models.RsaKeyPair

class AutoGeneratedKeysRepo : IKeysRepo {
  companion object {
    private val log = slf4j(AutoGeneratedKeysRepo::class)
  }

  private val aesKey = Keys.generateAesKey()
  private val rsaKeyPair = Keys.generateRsaKeyPair()
  private val eccKeyPair = Keys.generateEccKeyPair()

  init {
    log.warn("警告：正在使用一次性生成的 KeyRepository，该提供程序每次启动都会变化")
  }

  override fun basicAesKey(): SecretKeySpec? {
    return aesKey
  }

  override fun basicRsaKeyPair(): RsaKeyPair? {
    return rsaKeyPair
  }

  override fun basicEccKeyPair(): EccKeyPair? {
    return eccKeyPair
  }
}
