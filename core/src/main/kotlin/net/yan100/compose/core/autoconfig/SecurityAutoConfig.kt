/*
 * ## Copyright (c) 2024 TrueNine. All rights reserved.
 *
 * The following source code is owned, developed and copyrighted by TrueNine
 * (truenine304520@gmail.com) and represents a substantial investment of time, effort,
 * and resources. This software and its components are not to be used, reproduced,
 * distributed, or sublicensed in any form without the express written consent of
 * the copyright owner, except as permitted by law.
 * Any unauthorized use, distribution, or modification of this source code,
 * or any portion thereof, may result in severe civil and criminal penalties,
 * and will be prosecuted to the maximum extent possible under the law.
 * For inquiries regarding usage or redistribution, please contact:
 *     TrueNine
 *     Email: <truenine304520@gmail.com>
 *     Website: [gitee.com/TrueNine]
 */
package net.yan100.compose.core.autoconfig

import net.yan100.compose.core.log.slf4j
import net.yan100.compose.core.util.encrypt.AutoGeneratedKeysRepo
import net.yan100.compose.core.util.encrypt.IKeysRepo
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean
import org.springframework.context.ApplicationContext
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.context.annotation.Primary
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
import org.springframework.security.crypto.password.PasswordEncoder

/**
 * spring security 安全策略配置器
 *
 * @author TrueNine
 * @since 2023-02-20
 */
@Configuration
class SecurityAutoConfig {

  @Bean
  @ConditionalOnMissingBean(IKeysRepo::class)
  fun autoGenerateKeys(): IKeysRepo = AutoGeneratedKeysRepo()

  /**
   * 配置主要的密码加密策略 目前使用 BCrypt 2a 14 策略
   *
   * @param ctx spring 容器上下文
   */
  @Bean
  @Primary
  fun bCryptPasswordEncoder(ctx: ApplicationContext?): PasswordEncoder {
    val bCryptPasswordEncoder = BCryptPasswordEncoder(BCryptPasswordEncoder.BCryptVersion.`$2A`, 14)
    log.debug("注册 bCryptPasswordEncoder = {}", bCryptPasswordEncoder)
    return bCryptPasswordEncoder
  }

  companion object {
    @JvmStatic private val log = slf4j(SecurityAutoConfig::class)
  }
}
