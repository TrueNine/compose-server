---
description: 
globs: 
alwaysApply: true
---
# 技术选型
- 优先使用高性能新技术实现核心功能
- 保证代码在主流平台和环境中可运行
- 选择编译型强类型语言作为主要开发语言
- 使用静态类型检查工具保证代码质量

# 性能优化
- 关键路径代码必须经过性能优化
- 避免不必要的内存分配和复制
- 使用性能监控工具跟踪性能指标
- 控制程序启动时的资源开销
- 定期进行性能压测和基准测试

# 代码规范
- 所有代码必须通过静态类型检查
- 优先使用编译期检查替代运行时检查
- 函数实现必须保持纯函数特性
- 显式声明所有外部依赖关系
- 尽量避免使用动态特性和反射机制
- 最小化第三方依赖的引入

# 错误处理
- 使用类型系统捕获潜在错误
- 在编译期处理和检查异常情况
- 记录完整的错误上下文信息
- 实现服务异常的优雅降级
- 保证错误日志的可追踪性

# 测试验证
- 核心功能必须有单元测试覆盖
- 定期执行全量回归测试
- 验证所有公开接口的边界条件
- 自动化测试流程和结果分析
