---
description: 
globs: 
alwaysApply: true
---

# 项目总纲

## 最高优先级规则

**本项目彻底践行测试驱动开发 (TDD)，此规则优先级高于其他所有规则**

1. 开发流程
  - 先编写失败的测试，再实现功能代码
  - 所有功能必须有对应的测试用例
  - 禁止提交未经测试验证的代码

2. 测试覆盖要求
  - 核心功能模块测试覆盖率必须达到 90% 以上
  - 重要工具函数必须实现 100% 分支覆盖
  - 每个公共 API 至少有一个正向测试和一个边界条件测试

3. 测试优先原则
  - 任何重构必须在测试保护下进行
  - 测试代码质量与生产代码同等重要
  - 测试应验证行为而非实现细节

## 基础流程

1. 在执行任何操作前，请先阅读以下关键文档：
   - [编程守则](mdc:.cursor/rules/shared-dev-standard.mdc)
   - [环境配置](mdc:.cursor/rules/shared-dev-env.mdc)

2. 在处理特定任务时，根据需要阅读：
  - 涉及单元测试：参考[测试守则](mdc:.cursor/rules/test.mdc)
  - 涉及Git提交：参考[提交消息规范](mdc:.cursor/rules/shared-git-commit-message-standard.mdc)

3. 使用`run_terminal_cmd`时，必须严格按照[环境配置](mdc:.cursor/rules/shared-dev-env.mdc)中指定的命令行工具

## 核心准则

请在所有开发工作中遵循这些基本准则：

1. 性能与可维护性优先
  - 可读性和执行效率同等重要
  - 优先选择高效的解决方案

2. 早期问题检测
  - 使用静态分析工具主动发现问题
  - 编写单元测试验证功能正确性

3. 静态类型优先
  - 使用强类型系统捕获错误
  - 避免运行时类型检查的开销

## 性能优化指南

在优化代码时，请遵循以下指导：

1. 内存管理
  - 最小化不必要的内存分配
  - 避免大对象的复制操作
  - 及时释放不再使用的资源

2. 关键指标监控
  - 关注响应时间、内存占用和启动时间
  - 在关键路径上避免昂贵操作

3. 算法效率
  - 选择适当的数据结构和算法
  - 避免O(n²)及更高复杂度的操作
  - 合理使用缓存和索引提高效率 
