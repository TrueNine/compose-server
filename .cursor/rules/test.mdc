---
description:
globs: *Test.kt,*Test.java
alwaysApply: false
---

# 测试技术栈与规范（Kotlin/Java）

可用依赖：jUnit5、junit5-params、kotlin.test、mockk、spring-boot-test、testcontainers

---

## 测试框架选型

- Java：JUnit 5
- Kotlin Mock 框架：MockK
- Java Mock 框架：Mockito
- 集成测试：Testcontainers（数据库/Redis/消息队列）

---

## 命名规范

- 测试类名：被测类名 + Test
- 测试方法名：用反引号包裹，描述场景
  - 正向：`方法名 输入条件 返回预期结果`
  - 异常：`方法名 失败场景 抛出预期异常`
  - 边界：`方法名 边界条件 返回预期结果`
  - 性能：`方法名 性能指标 返回预期结果`

---

## Kotlin 风格测试编写规则

- 测试代码应充分体现 Kotlin 语言特性：
  - 善用扩展函数、数据类、解构、空安全等 Kotlin 语法糖
  - 命名风格遵循 Kotlin 惯例，变量名简洁、可读性强
  - 断言优先使用 kotlin.test 提供的方法，表达式化书写
  - Mock 框架优先选用 mockk，避免 Java 习惯的 Mockito
  - 测试代码整体尽量函数式、表达式化，减少冗余和样板代码
  - 使用 mockMvc 进行接口测试时，也要保持 Kotlin 风味：推荐用 Kotlin 的 DSL、扩展函数和空安全特性封装 mockMvc 操作，断言和链式调用表达式化，避免冗余的 Java 风格写法，充分利用
    Kotlin 语法优势

---

## 代码示例

```kotlin
import kotlin.test.*
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.ValueSource

class ExampleApiTest {
  @BeforeTest
  fun setup() {
  }
  @AfterTest
  fun after() {
  }

  @Test
  fun `getUserDatas 失败后返回 403 响应码`() {
  }

  @Test
  fun `postUserDatas 保证接口幂等性`() {
  }

  @ParameterizedTest
  @ValueSource(strings = ["admin", "guest", "user"])
  fun `getUserRole 输入不同角色 返回预期权限`(role: String) {
  }
}
```

---

## 测试失败处理建议

- 明确失败原因，断言/日志输出具体信息
- 针对失败场景，提出修复或优化建议
- 反思被测对象设计，必要时优化业务逻辑
- 主动提出改进建议，共同提升质量
