---
globs: *.kt,*.kts
---

# Kotlin Development Standards

Based on [docs/GLOBAL_CLAUDE.md](mdc:docs/GLOBAL_CLAUDE.md), follow these strict Kotlin conventions:

## Variable Declarations
- **Always prefer `val`** over `var` for immutable variables
- Use descriptive names, avoid abbreviations
- **Forbidden**: `util`, `utils`, `tool` in naming

## Null Safety
- **Avoid `!!` operator** - use `?.` or `let{}` instead
- Prefer safe calls and Elvis operator
- Use `let`, `run`, `with`, `apply` scope functions appropriately

## Function Design
- **Use data classes** instead of functions with many parameters
- **Maximize `early return`** to reduce nesting levels
- Keep functions small and focused on single responsibility

## Testing Standards
- **Use `mockk`** instead of Mockito for mocking
- **Forbidden**: `@DisplayName` annotations
- Test method names use backticks with Chinese descriptions: `fun \`测试用户创建成功\`()`
- **Nested test organization**: Use `@Nested inner class` for grouping
- **Every test must have assertions** - no assertion-free tests allowed

## Logging
- **Forbidden**: `println` for output - use proper logging framework
- Add comprehensive logging for debugging and monitoring
- Use structured logging with meaningful context

## Code Quality
- **Forbidden**: `@Suppress` annotations to hide warnings
- **Forbidden**: Exposing API keys, passwords, tokens in code
- Handle exceptions properly - never ignore or hide them
- Use meaningful variable and function names

## Spring Framework
- **Use `@Resource`** instead of `@Autowired` for dependency injection
- Follow Spring Boot 3.5.x conventions
- Leverage Kotlin-specific Spring features

## Build Scripts (*.kts)
- Use Kotlin DSL for Gradle build scripts
- Leverage type-safe project accessors
- Follow version catalog conventions from [gradle/libs.versions.toml](mdc:gradle/libs.versions.toml)
