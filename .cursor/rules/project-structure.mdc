---
alwaysApply: true
---

# Compose Server Project Structure

This is a modular Kotlin enterprise framework built with Spring Boot 3.5.x, Kotlin 2.2.x, and Jimmer ORM.

## Core Architecture

- **Root Project**: `compose-server` - Multi-module Gradle project
- **Main Entry**: [shared/](mdc:shared/) - Core shared functionality and base classes
- **Build System**: Gradle with Kotlin DSL, Version Catalog in [gradle/libs.versions.toml](mdc:gradle/libs.versions.toml)
- **Build Logic**: Custom build conventions in [build-logic/](mdc:build-logic/)

## Module Categories

### Core Modules
- [shared/](mdc:shared/) - Core shared functionality, base classes, utilities
- [bom/](mdc:bom/) - Bill of Materials for dependency management
- [version-catalog/](mdc:version-catalog/) - Gradle version catalog for external projects
- [gradle-plugin/](mdc:gradle-plugin/) - Custom Gradle plugins
- [testtoolkit/](mdc:testtoolkit/) - Testing utilities and TestContainers setup

### Database & Persistence (rds/)
- [rds/rds-shared/](mdc:rds/rds-shared/) - Core database abstractions and Jimmer configurations
- [rds/rds-crud/](mdc:rds/rds-crud/) - CRUD operations and repository patterns
- [rds/rds-flyway-migration-*/](mdc:rds/) - Database migration modules for PostgreSQL/MySQL

### Security (security/)
- [security/security-spring/](mdc:security/security-spring/) - Spring Security configurations
- [security/security-oauth2/](mdc:security/security-oauth2/) - OAuth2 implementations
- [security/security-crypto/](mdc:security/security-crypto/) - Cryptographic utilities

### Object Storage (oss/)
- [oss/oss-shared/](mdc:oss/oss-shared/) - Common storage abstractions
- [oss/oss-minio/](mdc:oss/oss-minio/) - MinIO implementation
- [oss/oss-aliyun-oss/](mdc:oss/oss-aliyun-oss/) - Alibaba Cloud OSS
- [oss/oss-huawei-obs/](mdc:oss/oss-huawei-obs/) - Huawei Cloud OBS
- [oss/oss-volcengine-tos/](mdc:oss/oss-volcengine-tos/) - ByteDance TOS

### AI & Machine Learning (ai/)
- [ai/ai-shared/](mdc:ai/ai-shared/) - AI service abstractions
- [ai/ai-langchain4j/](mdc:ai/ai-langchain4j/) - LangChain4j integration

### Payment Systems (pay/)
- [pay/pay-shared/](mdc:pay/pay-shared/) - Payment abstractions
- [pay/pay-wechat/](mdc:pay/pay-wechat/) - WeChat Pay integration

### Code Generation (ksp/)
- [ksp/ksp-shared/](mdc:ksp/ksp-shared/) - KSP shared utilities
- [ksp/ksp-plugin/](mdc:ksp/ksp-plugin/) - Kotlin Symbol Processing plugins
- [ksp/ksp-meta/](mdc:ksp/ksp-meta/) - Metadata processing

## Key Configuration Files

- [settings.gradle.kts](mdc:settings.gradle.kts) - Project structure and module definitions
- [build.gradle.kts](mdc:build.gradle.kts) - Root build configuration
- [gradle/libs.versions.toml](mdc:gradle/libs.versions.toml) - Centralized version management
- [docs/GLOBAL_CLAUDE.md](mdc:docs/GLOBAL_CLAUDE.md) - Development standards and conventions

## Development Standards

All modules follow the project's strict development standards defined in [docs/GLOBAL_CLAUDE.md](mdc:docs/GLOBAL_CLAUDE.md), including TDD practices, Kotlin conventions, and security requirements.
