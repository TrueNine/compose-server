---
globs: **/security/**/*.kt,**/*Security*.kt,**/*Auth*.kt,**/*Crypto*.kt
---

# Security Implementation Guidelines

Security standards for the [security/](mdc:security/) modules and security-related code.

## Authentication & Authorization
- **Spring Security**: Use [security/security-spring/](mdc:security/security-spring/) configurations
- **OAuth2**: Implement via [security/security-oauth2/](mdc:security/security-oauth2/) module
- **JWT handling**: Follow secure token practices
- **Session management**: Stateless where possible

## Cryptographic Operations
- **Use [security/security-crypto/](mdc:security/security-crypto/)** for all crypto operations
- **Strong algorithms**: AES-256, RSA-2048+, SHA-256+
- **Secure random**: Use `SecureRandom` for key generation
- **Key management**: Never hardcode keys in source code

## Sensitive Data Handling
- **Forbidden**: API keys, passwords, tokens in source code
- **Environment variables**: Use for configuration secrets
- **Encryption at rest**: For sensitive database fields
- **Secure transmission**: HTTPS/TLS for all communications

## Input Validation & Sanitization
- **Validate all inputs** at API boundaries
- **Parameterized queries**: Prevent SQL injection
- **XSS prevention**: Sanitize user-generated content
- **CSRF protection**: Enable for state-changing operations

## Password Security
- **Strong hashing**: Use bcrypt, scrypt, or Argon2
- **Salt generation**: Unique salt per password
- **Password policies**: Enforce complexity requirements
- **Account lockout**: Implement brute force protection

## API Security
- **Rate limiting**: Prevent abuse and DoS
- **CORS configuration**: Restrict cross-origin requests
- **Security headers**: Implement OWASP recommendations
- **API versioning**: Maintain backward compatibility securely

## Logging & Monitoring
- **Security events**: Log authentication attempts, failures
- **Audit trails**: Track sensitive operations
- **No sensitive data**: Never log passwords, tokens, PII
- **Structured logging**: Use consistent security event format

## Testing Security Code
- **Security test cases**: Test authentication, authorization flows
- **Negative testing**: Test with invalid/malicious inputs
- **Penetration testing**: Regular security assessments
- **Dependency scanning**: Use OWASP dependency check (configured in root [build.gradle.kts](mdc:build.gradle.kts))
