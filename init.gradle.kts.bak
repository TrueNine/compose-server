import java.util.Properties
// 外部仓库名称
val replaceName: String = "external"
// 外部仓库地址
val replaceMap = mapOf(
  "${replaceName}public" to "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/",
  "${replaceName}central" to "https://mirrors.cloud.tencent.com/nexus/repository/maven-central/",
  "${replaceName}gradlePlugin" to "https://maven.aliyun.com/repository/gradle-plugin/",
  "${replaceName}spring" to "https://repo.spring.io/milestone/"
)

data class Define(val url: String? = null, val username: String? = null, val password: String? = null)
fun getPrivateRepoDefine(): Set<Define> {
  fun getSeriesKey(key: String, sur: String, ad: String) = key.replace("$sur.", "$ad.")
  val pSet = mutableSetOf<Define>()
  val pMap = gradle.gradleUserHomeDir.listFiles()?.find {
    it.name == "gradle.properties" && it.exists()
  }?.let {
    val p = Properties()
    p.load(it.inputStream())
    p
  }
  if (pMap == null) return pSet
  pMap.forEach { (sk, sv) ->
    val k = sk as? String?
    val v = sv as? String?
    if (k != null && k.toString().startsWith("usr.")) {
      val url = pMap[getSeriesKey(k, "usr", "url")] as? String?
      val pwd = pMap[getSeriesKey(k, "usr", "pwd")] as? String?
      pSet += Define(url, username = v, password = pwd)
    }
  }
  return pSet.filter { it.url != null && it.username != null && it.password != null }.toSet()
}
val privateRepoList = getPrivateRepoDefine()
fun RepositoryHandler.mappingPrivateRepoTask() {
  privateRepoList.forEach {
    maven {
      url = uri(it.url!!)
      credentials {
        username = it.username
        password = it.password
      }
    }
  }
}
// 普通仓库
fun RepositoryHandler.mappingRepoTask() {
  mavenLocal()
  mappingPrivateRepoTask()
  addExternalRepo("public")
  addExternalRepo("central")
  addExternalRepo("spring")
  addExternalRepo("gradlePlugin")
  mavenCentral()
}
// 插件仓库
fun RepositoryHandler.mappingPluginRepoTask() {
  mavenLocal()
  mappingPrivateRepoTask()
  addExternalRepo("gradlePlugin")
  addExternalRepo("spring")
  gradlePluginPortal()
}

fun RepositoryHandler.addRepo(url: String, name: String? = null) {
  val rUrl = url.removeSuffix("/")
  val urlStringLists = map { (it as? MavenArtifactRepository)?.url?.toString()?.removeSuffix("/") }
  if (urlStringLists.contains(rUrl)) return
  else maven {
    this.url = uri(url)
    name?.also { this.name = it }
  }
}
fun RepositoryHandler.addExternalRepo(name: String) {
  val u = replaceMap["$replaceName$name"]
  u?.also { addRepo(it, "$replaceName$name") }
}

beforeSettings {
  pluginManagement { repositories { mappingPluginRepoTask() } }
  dependencyResolutionManagement { repositories { mappingPluginRepoTask() } }
}

beforeProject {
  repositories { mappingRepoTask() }
}

allprojects {
  buildscript { repositories { mappingRepoTask() } }
  repositories { mappingRepoTask() }
}
