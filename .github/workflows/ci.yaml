name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=8 -Dkotlin.incremental=false -Dorg.gradle.configuration-cache=false"
  # JVM ÊÄßËÉΩ‰ºòÂåñÈÖçÁΩÆ
  JVM_OPTS: "-Xmx6g -XX:MaxMetaspaceSize=1g -XX:+UseG1GC -Xshare:off"

jobs:
  # üîç Âø´ÈÄüÊ£ÄÊü• - ÁºñËØëÂíåÂü∫Á°ÄÈ™åËØÅ
  quick-check:
    name: "üîç Quick Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-info.outputs.cache-key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: gradle

      - name: Cache info
        id: cache-info
        run: |
          echo "cache-key=${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'gradle/libs.versions.toml') }}" >> $GITHUB_OUTPUT

      - name: Cache Gradle wrapper
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/jdks
            ~/.gradle/buildOutputCleanup
            ~/.konan
            ~/.m2/repository
          key: ${{ steps.cache-info.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '9.0.0'
          cache-read-only: false

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Check code formatting
        run: |
          ./gradlew spotlessCheck --no-daemon

      - name: Quick compile
        run: |
          ./gradlew compileKotlin compileTestKotlin --no-daemon --parallel

  # üß™ Âπ∂Ë°åÊµãËØïÁü©Èòµ
  test-matrix:
    name: "üß™ Test"
    needs: quick-check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        group:
          - "core"      # shared, testtoolkit, gradle-plugin, version-catalog, bom
          - "rds"       # ÊâÄÊúâÊï∞ÊçÆÂ∫ìÁõ∏ÂÖ≥Ê®°Âùó  
          - "business"  # ai, pay, oss, sms, surveillance
          - "security"  # security Áõ∏ÂÖ≥Ê®°Âùó
          - "data"      # data, depend Ê®°Âùó
        include:
          - group: "core"
            modules: ":shared :testtoolkit :gradle-plugin :version-catalog :bom"
            containers: "none"
          - group: "rds"
            modules: ":rds:rds-shared :rds:rds-crud :rds:rds-jimmer-ext-postgres :rds:rds-flyway-migration-postgresql :rds:rds-flyway-migration-mysql8 :rds:rds-flyway-migration-shared"
            containers: "database"
          - group: "business"
            modules: ":ai:ai-shared :ai:ai-langchain4j :pay:pay-shared :pay:pay-wechat :oss:oss-shared :oss:oss-minio :oss:oss-aliyun-oss :oss:oss-huawei-obs :oss:oss-volcengine-tos :sms:sms-shared :sms:sms-tencent :surveillance:surveillance-shared :surveillance:surveillance-hikvision :cacheable"
            containers: "cache"
          - group: "security"
            modules: ":security:security-crypto :security:security-oauth2 :security:security-spring"
            containers: "none"
          - group: "data"
            modules: ":data:data-crawler :data:data-extract :depend:depend-http-exchange :depend:depend-jackson :depend:depend-paho :depend:depend-servlet :depend:depend-springdoc-openapi :depend:depend-xxl-job :ksp:ksp-meta :ksp:ksp-plugin :ksp:ksp-shared"
            containers: "none"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: gradle

      - name: Cache Gradle wrapper
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/jdks
            ~/.gradle/buildOutputCleanup
            ~/.konan
            ~/.m2/repository
          key: ${{ needs.quick-check.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '9.0.0'
          cache-read-only: true

      # Êù°‰ª∂ÊÄßËÆæÁΩÆ Docker Âíå TestContainers
      - name: Set up Docker Buildx
        if: matrix.containers != 'none'
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        if: matrix.containers != 'none'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ matrix.group }}-${{ hashFiles('**/Dockerfile*', '**/docker-compose*') }}
          restore-keys: |
            ${{ runner.os }}-docker-${{ matrix.group }}-
            ${{ runner.os }}-docker-

      # È¢ÑÊãâÂèñÂ∏∏Áî®Êï∞ÊçÆÂ∫ìÈïúÂÉè
      - name: Pre-pull database images
        if: matrix.containers == 'database'
        run: |
          docker pull postgres:16-alpine &
          docker pull mysql:8.0 &
          docker pull redis:7-alpine &
          wait
        continue-on-error: true

      # È¢ÑÊãâÂèñÁºìÂ≠òÁõ∏ÂÖ≥ÈïúÂÉè  
      - name: Pre-pull cache images
        if: matrix.containers == 'cache'
        run: |
          docker pull redis:7-alpine &
          docker pull minio/minio:latest &
          wait
        continue-on-error: true

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: Run tests for ${{ matrix.group }} modules
        run: |
          ./gradlew ${{ matrix.modules }} test \
            --no-daemon \
            --parallel \
            --no-build-cache \
            --continue
        env:
          # TestContainers ‰ºòÂåñÈÖçÁΩÆ
          TESTCONTAINERS_RYUK_DISABLED: false
          TESTCONTAINERS_CHECKS_DISABLE: false
          TESTCONTAINERS_REUSE_ENABLE: true
          TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX: ""
          TESTCONTAINERS_REUSE_HASH_LABELS: true
          # Docker ÊÄßËÉΩ‰ºòÂåñ
          DOCKER_HOST: unix:///var/run/docker.sock
          TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE: /var/run/docker.sock
          TESTCONTAINERS_HOST_OVERRIDE: localhost
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
          # JVM ÊÄßËÉΩË∞É‰ºò
          GRADLE_OPTS: "${{ env.GRADLE_OPTS }} ${{ env.JVM_OPTS }}"
          # CI ÁéØÂ¢ÉÈÖçÁΩÆ
          CI: true
          GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.group }}
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 3

      - name: Cleanup containers
        if: always() && matrix.containers != 'none'
        run: |
          # Ê∏ÖÁêÜÊµãËØïÂÆπÂô®Ôºå‰ΩÜ‰øùÁïôÂèØÈáçÁî®ÂÆπÂô®
          docker container prune -f --filter "until=30m" --filter "label!=org.testcontainers.reuse.enable=true"
          # Ê∏ÖÁêÜÊÇ¨Á©∫ÈïúÂÉè
          docker image prune -f --filter "dangling=true"
          # Ê∏ÖÁêÜÊµãËØïÂç∑
          docker volume prune -f --filter "label!=keep"

  # üìä ÊµãËØïÁªìÊûúÊ±áÊÄª
  test-results:
    name: "üìä Test Results Summary"
    needs: [ quick-check, test-matrix ]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results
          pattern: test-results-*

      - name: Generate test summary
        run: |
          echo "# üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Module Group | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for group in core rds business security data; do
            if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
              echo "| $group | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $group | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Check overall status
        run: |
          if [[ "${{ needs.quick-check.result }}" != "success" ]]; then
            echo "‚ùå Quick check failed"
            exit 1
          fi
          if [[ "${{ needs.test-matrix.result }}" != "success" ]]; then
            echo "‚ùå Test matrix failed" 
            exit 1
          fi
          echo "‚úÖ All checks passed"
