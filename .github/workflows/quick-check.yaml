name: Quick Check

on:
  push:
    branches: [ main, dev ]
    paths:
      - '.github/workflows/quick-check.yaml'
      - '**/*.kt'
      - '**/*.kts'
      - 'gradle/libs.versions.toml'
      - '**/build.gradle.kts'
  pull_request:
    branches: [ main, dev ]
    paths:
      - '.github/workflows/quick-check.yaml'
      - '**/*.kt'
      - '**/*.kts'
      - 'gradle/libs.versions.toml'
      - '**/build.gradle.kts'

# 防止同一分支的多次并发执行
concurrency:
  group: quick-check-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # 🚀 快速检查专用配置 - 最小化资源使用和最大化速度
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4 -Dkotlin.incremental=true -Dorg.gradle.configuration-cache=true -Dorg.gradle.build-cache=true"
  JVM_OPTS: "-Xmx3g -XX:MaxMetaspaceSize=768m -XX:+UseG1GC -XX:G1HeapRegionSize=16m"
  # 🔧 CI 环境标识
  CI: true

jobs:
  # ⚡ 超快速语法和编译检查
  syntax-check:
    name: "⚡ Syntax & Compile"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '9.0.0'
          cache-read-only: false

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: ⚡ Gradle 配置验证
        run: |
          # 验证 Gradle 配置和项目结构
          ./gradlew help --quiet
          ./gradlew projects --quiet
          echo "✅ Gradle 配置验证通过"

      - name: 🔍 核心模块编译检查
        run: |
          # 编译核心基础模块进行快速验证
          ./gradlew :shared:compileKotlin :testtoolkit:testtoolkit-shared:compileKotlin \
            --no-daemon \
            --parallel \
            --build-cache \
            --configuration-cache \
            --quiet
          echo "✅ 核心模块编译成功"
        env:
          GRADLE_OPTS: "${{ env.GRADLE_OPTS }} ${{ env.JVM_OPTS }}"

  # 🧹 代码质量快速检查 - 与核心测试并行执行
  quality-check:
    name: "🧹 Code Quality"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: syntax-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '9.0.0'
          cache-read-only: true

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: 🧹 代码格式检查
        run: |
          ./gradlew spotlessCheck \
            --no-daemon \
            --parallel \
            --build-cache \
            --quiet
          echo "✅ 代码格式检查通过"
        env:
          GRADLE_OPTS: "${{ env.GRADLE_OPTS }} ${{ env.JVM_OPTS }}"

      - name: 📊 依赖分析
        run: |
          # 基础依赖一致性检查
          ./gradlew dependencies --quiet > /dev/null || echo "⚠️ 依赖检查完成（有警告）"
          echo "✅ 依赖分析完成"
        continue-on-error: true

  # 🧪 核心模块快速测试
  core-test:
    name: "🧪 Core Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: syntax-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '9.0.0'
          cache-read-only: true

      - name: Grant execute permission
        run: chmod +x gradlew

      - name: 🧪 核心模块测试
        run: |
          # 只运行核心基础模块的测试
          ./gradlew :shared:test :testtoolkit:testtoolkit-shared:test \
            --no-daemon \
            --parallel \
            --build-cache \
            --configuration-cache \
            --quiet \
            -Dorg.gradle.workers.max=2
          echo "✅ 核心模块测试通过"
        env:
          GRADLE_OPTS: "${{ env.GRADLE_OPTS }} ${{ env.JVM_OPTS }}"

  # ✅ 快速检查结果汇总
  quick-check-result:
    name: "✅ Quick Check Result"
    needs: [ syntax-check, quality-check, core-test ]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 生成检查结果报告
        run: |
          echo "# ⚡ 快速检查结果报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**执行时间:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**分支:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**触发事件:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🔍 检查结果详情" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 检查项目 | 状态 | 说明 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|------|------|" >> $GITHUB_STEP_SUMMARY
          
          # 语法和编译检查
          if [[ "${{ needs.syntax-check.result }}" == "success" ]]; then
            echo "| 🔍 语法编译 | ✅ 通过 | Gradle 配置 + 核心模块编译 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔍 语法编译 | ❌ 失败 | 检查编译错误和 Gradle 配置 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 代码质量检查
          if [[ "${{ needs.quality-check.result }}" == "success" ]]; then
            echo "| 🧹 代码质量 | ✅ 通过 | Spotless 格式 + 依赖分析 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧹 代码质量 | ❌ 失败 | 运行 \`./gradlew spotlessApply\` 修复格式 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 核心测试
          if [[ "${{ needs.core-test.result }}" == "success" ]]; then
            echo "| 🧪 核心测试 | ✅ 通过 | shared + testtoolkit 模块测试 |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 核心测试 | ❌ 失败 | 检查测试日志和业务逻辑 |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 总体状态评估
          all_passed=true
          if [[ "${{ needs.syntax-check.result }}" != "success" ]] || \
             [[ "${{ needs.quality-check.result }}" != "success" ]] || \
             [[ "${{ needs.core-test.result }}" != "success" ]]; then
            all_passed=false
          fi
          
          if [[ "$all_passed" == "true" ]]; then
            echo "## ✅ 检查通过" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **所有快速检查都已通过！**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 代码编译正常" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 代码格式规范" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ 核心功能测试正常" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 可以安全地进行完整的 CI 测试或合并代码。" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ 检查失败" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **发现问题，请修复后重试：**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 常见修复方法" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **代码格式问题**: 运行 \`./gradlew spotlessApply\`" >> $GITHUB_STEP_SUMMARY
            echo "- **编译错误**: 检查 Kotlin 语法和导入" >> $GITHUB_STEP_SUMMARY
            echo "- **测试失败**: 检查业务逻辑和测试用例" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
