name: Release

on:
  push:
    branches: [ main ]
    paths:
      - 'gradle/libs.versions.toml'

jobs:
  check-compose-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check-version.outputs.changed }}
      new-version: ${{ steps.check-version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check compose version change
        id: check-version
        run: |
          # 获取当前 compose 版本
          CURRENT_VERSION=$(grep '^compose = ' gradle/libs.versions.toml | sed 's/compose = "\(.*\)"/\1/')
          echo "Current compose version: $CURRENT_VERSION"
          
          # 获取上一次提交的 compose 版本
          if git show HEAD~1:gradle/libs.versions.toml > /tmp/prev_versions.toml 2>/dev/null; then
            PREV_VERSION=$(grep '^compose = ' /tmp/prev_versions.toml | sed 's/compose = "\(.*\)"/\1/' || echo "")
            echo "Previous compose version: $PREV_VERSION"
          
            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ] && [ -n "$PREV_VERSION" ]; then
              echo "Compose version changed from $PREV_VERSION to $CURRENT_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Compose version unchanged"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Previous version file not found, treating as new version"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-compose-version
    if: needs.check-compose-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.14'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests before release
        run: ./gradlew test --no-daemon --stacktrace

      - name: Build project
        run: ./gradlew build --no-daemon --stacktrace

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ needs.check-compose-version.outputs.new-version }}"
          echo "## 🚀 Release v$NEW_VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 📦 Changes" >> CHANGELOG.md
          echo "- Updated compose version to $NEW_VERSION" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 🔄 Recent Commits" >> CHANGELOG.md
          git log --oneline -10 --pretty=format:"- %s (%h)" >> CHANGELOG.md
          
          # 输出到 GitHub Actions
          {
            echo 'CHANGELOG<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-compose-version.outputs.new-version }}
          name: Release v${{ needs.check-compose-version.outputs.new-version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            build/libs/*.jar
            **/build/libs/*.jar
